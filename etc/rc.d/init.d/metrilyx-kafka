#!/bin/sh
#
# chkconfig: 234 90 10
# description: Metrilyx Data Server.  This provides data via websockets.
#

[ -f "/etc/rc.d/init.d/functions" ] && . /etc/rc.d/init.d/functions

#NAME="kafka-zookeeper"
APP_HOME="/opt/kafka"
LOGDIR="/var/log"
PGREP="/usr/bin/pgrep -f"

ZK_CFG="./config/zookeeper.properties"
ZK_CMD="./bin/zookeeper-server-start.sh"

KAFKA_CFG="./config/server.properties"
KAFKA_CMD="./bin/kafka-server-start.sh"

RETVAL=0

start_kafka() {
	NAME="kafka"
	LOGFILE="${NAME}.log"
	
	PIDS=`${PGREP} "${KAFKA_CFG}" | xargs`;
	if [ "$PIDS" = "" ]; then
		echo -n "${NAME} starting... "
		cd ${APP_HOME} && ${KAFKA_CMD} ${KAFKA_CFG} > ${LOGDIR}/${LOGFILE} 2>&1 &
		sleep 1;
		PIDS=`${PGREP} "${KAFKA_CFG}" | xargs`;
		if [ "$PIDS" = "" ]; then
			echo "[failed]";
			RETVAL=2;
			return 2;
		else
			echo "[ok]";
			RETVAL=0;
			return 0;
		fi
	else
		echo -n "${NAME} already running... ${PIDS}";
		RETVAL=1
		return 1;
	fi
}
start_zookeeper() {
	NAME="zookeeper"
	LOGFILE="${NAME}.log"
	
	PIDS=`${PGREP} "${ZK_CFG}" | xargs`;
	if [ "$PIDS" = "" ]; then
		echo -n "${NAME} starting... "
		cd ${APP_HOME} && ${ZK_CMD} ${ZK_CFG} > ${LOGDIR}/${LOGFILE} 2>&1 &
		sleep 1;
		PIDS=`${PGREP} "${ZK_CFG}" | xargs`;
		if [ "$PIDS" = "" ]; then
			echo "[failed]";
			RETVAL=2;
			return 2;
		else
			echo "[ok]";
			RETVAL=0;
			return 0;
		fi
	else
		echo -n "${NAME} already running... ${PIDS}";
		RETVAL=1;
		return 1;
	fi
}
start(){
	start_zookeeper && start_kafka
}
stop_zookeeper() {
	echo -n "zookeeper stopping... "
	PIDS=`${PGREP} "${ZK_CFG}" | xargs | sort -r`;
	for pid in $PIDS; do
		kill $pid;
	done
	echo "[ok]"
}
stop_kafka() {
	echo -n "kafka stopping... "
	PIDS=`${PGREP} "${KAFKA_CFG}" | xargs | sort -r`;
	for pid in $PIDS; do
		kill $pid;
	done
	echo "[ok]"
}
stop() {
	stop_kafka;
	sleep 3;
	stop_zookeeper;
}
status() {
	PIDS=`${PGREP} "${KAFKA_CFG}"`
	if [ "$PIDS" = "" ]; then
		echo "kafka not running";
	else
		echo "kafka running... ${PIDS}";
	fi
	PIDS=`${PGREP} "${ZK_CFG}"`
	if [ "$PIDS" = "" ]; then
		echo "zookeeper not running";
	else
		echo "zookeeper running... ${PIDS}";
	fi
}
case "$1" in
	start)
		start;
		;;
	stop)
		stop;
		;;
	status)
		status;
		;;
	restart)
		$0 stop
		sleep 3
		$0 start
		;;
	*)
		echo "$0 [start|stop|restart|status]"
		exit 1;
esac
exit $RETVAL;
